package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/nebula-aac/public-projects/simple-gqlgen-chi/graph/model"
)

// RegisterNewNinja is the resolver for the registerNewNinja field.
func (r *mutationResolver) RegisterNewNinja(ctx context.Context, input model.NewNinjaInput) (*model.ResponseMessage, error) {
	// For simplicity, let's just print the input for now
	fmt.Printf("Received NewNinjaInput: %+v\n", input)

	// You can perform validation or other logic here

	// Return a success message
	return &model.ResponseMessage{Message: "Ninja registered successfully"}, nil
}

// FindNinja is the resolver for the findNinja field.
func (r *queryResolver) FindNinja(ctx context.Context, name string) (*model.Ninja, error) {
	// For simplicity, let's just print the received name for now
	fmt.Printf("Searching for Ninja with name: %s\n", name)

	//
	placeholderHit := &model.Weapon{
		Hit: "N/A",
	}

	// For now, let's return a placeholder ninja with properly instantiated ThrowableWeapon
	placeholderThrowableWeapon := &model.ThrowableWeapon{
		Throw: "N/A",
	}

	// You can perform logic to find the ninja based on the name here
	// For now, let's return a placeholder ninja
	placeholderNinja := &model.Ninja{
		Name:  pointerToString("Placeholder Ninja"),
		Rank:  pointerToString("Unknown"),
		Fight: "N/A",
		Sneak: "N/A",
		// Assuming Weapon and ThrowableWeapon are also placeholder strings
		Hit:   placeholderHit,
		Throw: placeholderThrowableWeapon,
	}

	return placeholderNinja, nil
}

// ReturnAllNinjas is the resolver for the returnAllNinjas field.
func (r *queryResolver) ReturnAllNinjas(ctx context.Context) ([]*model.Ninja, error) {
	// For simplicity, let's return a list of placeholder ninjas
	placeholderHit := &model.Weapon{
		Hit: "N/A",
	}
	placeholderThrowableWeapon := &model.ThrowableWeapon{
		Throw: "N/A",
	}

	placeholderNinjas := []*model.Ninja{
		{
			Name:  pointerToString("Ninja 1"),
			Rank:  pointerToString("Unknown"),
			Fight: "N/A",
			Sneak: "N/A",
			Hit:   placeholderHit,
			Throw: placeholderThrowableWeapon,
		},
		{
			Name:  pointerToString("Ninja 2"),
			Rank:  pointerToString("Unknown"),
			Fight: "N/A",
			Sneak: "N/A",
			Hit:   placeholderHit,
			Throw: placeholderThrowableWeapon,
		},
		// Add more ninjas as needed
	}

	return placeholderNinjas, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func pointerToString(s string) *string {
	return &s
}
